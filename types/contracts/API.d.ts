/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter } from "ethers";
import { Provider } from "ethers/providers";
import { BigNumber } from "ethers/utils";
import { TransactionOverrides } from ".";

export class API extends Contract {
  functions: {
    getAddr(_key: string): Promise<string>;

    getUint(_key: string): Promise<BigNumber>;

    hashSB(_a: string, _b: string): Promise<string>;

    assetGovernance(_token: string): Promise<string>;

    assetVoteDuration(_token: string): Promise<BigNumber>;

    assetQuorum(_token: string): Promise<BigNumber>;

    assetThreshold(_token: string): Promise<BigNumber>;

    assetStakeRequirement(_token: string): Promise<BigNumber>;

    commitmentValue(_token: string, _tokenHolder: string): Promise<BigNumber>;

    commitmentStart(_token: string, _tokenHolder: string): Promise<BigNumber>;

    commitmentReleaseTime(
      _token: string,
      _tokenHolder: string
    ): Promise<BigNumber>;

    getProposalID(
      _assetToken: string,
      _executingContract: string,
      _methodID: string,
      _parameterHash: string
    ): Promise<string>;

    proposalInitiator(_proposalID: string): Promise<string>;

    proposalToken(_proposalID: string): Promise<string>;

    proposalStart(_proposalID: string): Promise<BigNumber>;

    proposalVoteCount(_proposalID: string): Promise<BigNumber>;

    proposalVoted(
      _proposalID: string,
      _tokenHolder: string
    ): Promise<BigNumber>;

    proposalDissent(_proposalID: string): Promise<BigNumber>;

    proposalApproval(_proposalID: string): Promise<BigNumber>;

    proposalQuorum(_proposalID: string): Promise<BigNumber>;

    proposalThreshold(_proposalID: string): Promise<BigNumber>;

    hasConsensus(proposalID: string): Promise<boolean>;

    getNumTokensAvailable(
      _proposalID: string,
      _investor: string
    ): Promise<BigNumber>;

    getAssetManagerParameterHash(
      _assetToken: string,
      _oldAssetManager: string,
      _newAssetManager: string,
      _amount: number | string | BigNumber,
      _withhold: boolean
    ): Promise<string>;

    getMethodID(_functionString: string): Promise<string>;

    getOrderID(
      _assetAddress: string,
      _investor: string,
      _amount: number | string | BigNumber,
      _price: number | string | BigNumber,
      _buyOrder: boolean
    ): Promise<string>;

    getAssetFundingToken(_assetAddress: string): Promise<string>;

    getAssetROI(_assetAddress: string): Promise<BigNumber>;

    getCrowdsaleGoal(_assetAddress: string): Promise<BigNumber>;

    getCrowdsaleDeadline(_assetAddress: string): Promise<BigNumber>;

    crowdsaleFinalized(_assetAddress: string): Promise<boolean>;

    crowdsalePaid(_assetAddress: string): Promise<boolean>;

    crowdsaleFailed(_assetAddress: string): Promise<boolean>;

    getAssetManager(_assetAddress: string): Promise<string>;

    getAssetManagerFee(_assetAddress: string): Promise<BigNumber>;

    getAssetPlatformFee(_assetAddress: string): Promise<BigNumber>;

    getAssetManagerEscrowID(
      _assetAddress: string,
      _manager: string
    ): Promise<string>;

    getAssetManagerEscrow(_managerEscrowID: string): Promise<BigNumber>;

    getAssetManagerEscrowRemaining(
      _managerEscrowID: string
    ): Promise<BigNumber>;

    getAssetManagerEscrowRedeemed(_managerEscrowID: string): Promise<BigNumber>;

    getAssetOperator(_assetAddress: string): Promise<string>;

    generateOperatorID(_operatorURI: string): Promise<string>;

    getOperatorID(_operatorAddress: string): Promise<string>;

    getOperatorAddress(_operatorID: string): Promise<string>;

    generateOrderID(
      _assetAddress: string,
      _sender: string,
      _amount: number | string | BigNumber,
      _price: number | string | BigNumber,
      _buyOrder: boolean
    ): Promise<string>;

    getContractAddress(_contractName: string): Promise<string>;

    getUserPermission(_investor: string): Promise<boolean>;

    getFunctionCost(_sig: string, _contract: string): Promise<BigNumber>;

    contractPaused(_contract: string): Promise<boolean>;

    contractOwner(_account: string): Promise<boolean>;

    getPlatformToken(): Promise<string>;
    getPlatformWallet(): Promise<string>;
    getCurrentState(): Promise<string>;
  };
  filters: {};
}
